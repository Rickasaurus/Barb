Barb is a small dynamic scripting language for .NET with the following properties:

- Fully expression oriented (Whitespace is completely ignored)
- Paren based scoping rules (Lisp-like)
- Syntax that makes both F# and C# devs feel at home

--

I created Barb because I needed a user language for my applications but yet no existing .NET language hosted nicely inside of my application.  This was my criteria:

- Simple/Terse Syntax
- Expression Oriented
- No casting necessary and transparent type conversions
- Native .NET type system
- Tries really hard to do what a non-technical user would expect
- Easy to maintain
- Fast Execution (I use it to script over sets of records in the millions range)

Dynamic Linq, IronPython and IronRuby all failed for one of these reasons or another.

The current implementation is still young and a bit rough around the edges. I needed to get something out fast for my product in about three days time.  After that period it was useful only for writing one-line expressions along these lines:

"(Name.Contains "John" or Name.Contains "Mary") and (Age > 20 or Weight > 200)"

It's seen some work since then but I'm not quite ready to put it out there.  In particular, it needs better error messages and some extra work into making a friendly API for hosting.

However, I thought it might be useful to others in its current form.  If you do play with it I hope you'll let me know what you think.

------------------------------------
---         Things To do         ---
------------------------------------

- Lambda interop with .NET
- Extension method resolution
- Recursive bindings
- A resonable API with configuration options

------------------------------------
--- Extra Nerdy Stuff Under Here ---
------------------------------------

Barb aims to accomplish the above goals through two somewhat non-traditional design decisions:

- Compilation by n-tuple expression merging. This is done initially to pre-compute as much as possible and second time for each final result
- Composition is used instead of IL or code generation, mainly function composition

Expression lists allow for tuple-wise reductions to a result, instead of standard code generation or expression building.  Decisions can be made at runtime based on the contents of these tuples and their neighbors. This allows for a huge amount of flexibility in deciding what to do.

Function/Value composition allows for fast code to be built out of existing .NET constructs and eliminates the complexity of a intermediate representation.

It's kind of Scheme-like under the hood, but I've worked hard to make it very C#/F#ish on the surface.