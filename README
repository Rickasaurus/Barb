Barb is a small dynamic scripting language for .NET with the following properties:

- Syntax that makes both F# and C# devs feel at home
- Fully expression oriented (Whitespace is completely ignored)
- Paren based scoping rules (Lisp-like)
- Pure functional (No mutation allowed)

This makes Barb an easy to learn language which you can give to your users for safely scripting over data in your application.


------------------------------------
---     	  Why Barb?          ---
------------------------------------


I created Barb because I needed a user language for my applications but yet no existing .NET language hosted nicely inside of my application and met my criteria:

- Simple/Terse Syntax
- Expression Oriented (Any program should be able to be represented in a single line of code)
- No casting necessary and transparent type conversions
- Native .NET type system (No painful conversions!)
- Tries really hard to do what a non-technical user would expect
- Easy to maintain
- Fast Execution (I use it to script over sets of records in the millions range)
- Safe from accidental data corruption by non-technical users

Dynamic Linq, IronPython and IronRuby all failed for one of these reasons or another.

The current implementation is still young and a bit rough around the edges. It's ideally useful only for writing one-line expressions along these lines:

"(Name.Contains "John" or Name.Contains "Mary") and (Age > 20 or Weight > 200)"

It can do much more, but still needs works to be friendly enoungh for a real release. In particular, it needs better error messages and some extra work into making a friendly API for hosting.

However, I thought it might be useful to others in its current form.  If you do play with it I hope you'll let me know what you think.


------------------------------------
---       Current Features       ---
------------------------------------

- Recursive lambda bindings with F# or C# syntax
- Value name binding with F# or C# syntax
- Order of operations 
- Static or instance calls and indexers via cached reflection
- Numerical sequence expressions (Identical to F#'s)
- Tuples (any IEnumerable is treated as a tuple internally)

 
------------------------------------
---        Things To do          ---
------------------------------------

- Lambda interop with .NET
- Extension method resolution
- A resonable API with configuration options
- Allow if/fun without parens in cases where it's already in a subexpression
- Generalized Sequence Expressions


------------------------------------
---     Planned Limitations      ---
------------------------------------

- All numbers are converted interally to Int64 or Double.  This will change but was necessary for now to keep things simple.
- Barb may cause unexpected behavior when making calls that mutate things.  I do plan on adding an API option to fix this, but it will tone down optimization significantly.


------------------------------------
--- Extra Nerdy Stuff Under Here ---
------------------------------------

Barb aims to accomplish the above goals through two somewhat non-traditional design decisions:

- Compilation by n-tuple expression merging. This is done initially to pre-compute as much as possible and second time for each final result
- Composition is used instead of IL or code generation, mainly function composition

Expression lists allow for tuple-wise reductions to a result, instead of standard code generation or expression building.  Decisions can be made at runtime based on the contents of these tuples and their neighbors. This allows for a huge amount of flexibility in deciding what to do.

Function/Value composition allows for fast code to be built out of existing .NET constructs and eliminates the complexity of a intermediate representation.

It's kind of Scheme-like under the hood, but I've worked hard to make it very C#/F#ish on the surface.